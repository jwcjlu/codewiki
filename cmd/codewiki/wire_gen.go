// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"codewiki/internal/biz"
	"codewiki/internal/conf"
	"codewiki/internal/data"
	"codewiki/internal/data/repo"
	"codewiki/internal/pkg/llm"
	"codewiki/internal/server"
	"codewiki/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	driverWithContext := data.NewDriverWithContext(dataData)
	db, err := data.NewGormDB(confData, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	projectRepo, err := repo.NewCompositeRepo(driverWithContext, db)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	config := biz.NewConfig(confData)
	llmLLM := llm.NewLLM(config)
	indexerRepo := repo.NewMilvus(confData)
	indexer := biz.NewIndexer(llmLLM, indexerRepo)
	codeWiki := biz.NewCodeWiki(projectRepo, indexer)
	qaEngine := biz.NewQAEngine(llmLLM, indexer, projectRepo)
	codeWikiService := service.NewCodeWikiService(codeWiki, qaEngine)
	httpServer := server.NewHTTPServer(confServer, codeWikiService, logger)
	grpcServer := server.NewGRPCServer(confServer, codeWikiService, logger)
	app := newApp(logger, httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
