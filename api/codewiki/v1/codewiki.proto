syntax = "proto3";

package codewiki.v1;
import "google/api/annotations.proto";
import "openapi/v3/annotations.proto";
import "validate/validate.proto";


option go_package = "codewiki/api/codewiki/v1;v1";
option java_multiple_files = true;
option java_package = "codewikiV1";

enum RepoType{
  Local = 0; // 本地
  Github=1;  //github
}
enum Language{
  Golang = 0; // Golang
  Java=1;  //Java
  Python=2;//Python
  Rust=3;//Rust
}

enum FunScope{
    Default=0;
    Struct=1;
    Interface=2;
    Constant=3;
    Variable=4;
}
service CodeWikiService {
  rpc CallChain(CallChainReq) returns (CallChainResp) {
    option (google.api.http) = {
      get: "/v1/api/functions/{id}/calls"
    };
    option (openapi.v3.operation) = {
      summary: "分析代码"
    };
  }

  // Repo management
  rpc CreateRepo(CreateRepoReq) returns (CreateRepoResp) {
    option (google.api.http) = {
      post: "/v1/api/repos"
      body: "*"
    };
    option (openapi.v3.operation) = { summary: "创建仓库" };
  }
  rpc ListRepos(ListReposReq) returns (ListReposResp) {
    option (google.api.http) = { get: "/v1/api/repos" };
    option (openapi.v3.operation) = { summary: "仓库列表" };
  }
  rpc GetRepo(GetRepoReq) returns (GetRepoResp) {
    option (google.api.http) = { get: "/v1/api/repos/{id}" };
    option (openapi.v3.operation) = { summary: "仓库详情" };
  }
  rpc DeleteRepo(DeleteRepoReq) returns (DeleteRepoResp) {
    option (google.api.http) = { delete: "/v1/api/repos/{id}" };
    option (openapi.v3.operation) = { summary: "删除仓库" };
  }

  // Analyze by repository id
  rpc AnalyzeRepo(AnalyzeRepoReq) returns (AnalyzeResp) {
    option (google.api.http) = {
      post: "/v1/api/repos/{id}/analyze"
      body: "*"
    };
    option (openapi.v3.operation) = { summary: "按仓库触发分析" };
  }

  // Repo tree display
  rpc GetRepoTree(GetRepoTreeReq) returns (GetRepoTreeResp) {
    option (google.api.http) = { get: "/v1/api/repos/{id}/tree" };
    option (openapi.v3.operation) = { summary: "仓库包/文件树" };
  }
  // File  view  content
  rpc ViewFileContent(ViewFileReq) returns (ViewFileResp) {
    option (google.api.http) = { get: "/v1/api/{repoId}/file/{id}/view" };
    option (openapi.v3.operation) = { summary: "文件/文件内容" };
  }
}
message AnalyzeReq{
   RepoType repoType=1;
   string path=2[(validate.rules).string = {min_len: 8, max_len: 256}];
   string target=3;
   string token=4;
   string language=5;
   repeated string includes =6;
   repeated string excludes=7;
}

message AnalyzeResp{
  int32 code=1;
  string msg=2;
}

message CallChainReq{
  string id=1;
}

message CallChainResp{
  int32 code=1;
  string msg=2;
  repeated CallRelationship callRelations=3;
}

message CallRelationship{
  string callerId=1;
  string callerName=2;
  string calleeId=3;
  string calleeName=4;
  string calleeFileId=5;
  string callerFileId=6;
  int64 calleeScope=7;
  int64 callerScope=8;
}

// ===== Repo Management =====
message Repo{
  string id=1;
  string name=2;
  RepoType repoType=3;
  string path=4;    // 本地路径，可选
  string target=5;  // 远端地址或本地路径
  string token=6;   // 令牌（如 GitHub），可选
  string description=7;
  repeated string excludes=8;//不需要分析的目录
  Language language=9;

}

message CreateRepoReq{
  string name=1[(validate.rules).string = {min_len: 1, max_len: 128}];
  RepoType repoType=2;
  string path=3;
  string target=4[(validate.rules).string = {min_len: 1, max_len: 512}];
  string token=5;
  string description=6;
  repeated string excludes=7;//不需要分析的目录
  Language language=8;
}
message CreateRepoResp{ string id=1; }

message ListReposReq{}
message ListReposResp{ repeated Repo repos=1; }

message GetRepoReq{ string id=1; }
message GetRepoResp{ Repo repo=1; }

message DeleteRepoReq{ string id=1; }
message DeleteRepoResp{}

message AnalyzeRepoReq{ string id=1; }

message GetRepoTreeReq{ string id=1; }
message GetRepoTreeResp{
  repeated PackageNode packages=1;
  repeated FileNode files=2;
}

message PackageNode{
  string id=1;
  string name=2;
  string parentId=3;
}
message FileNode{
  string id=1;
  string name=2;
  string pkgId=3;
}

message ViewFileReq{
  string repoId=2;
  string id=1;
}

message ViewFileResp{
  string Content=1;
  Language language=2;
  repeated Function functions=3;

}

message Function{
   string id=1;
   string fileId=2;
   string name=3;
   string receiver=4;
}