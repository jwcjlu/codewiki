// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: codewiki/v1/codewiki.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AnalyzeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnalyzeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyzeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnalyzeReqMultiError, or
// nil if none found.
func (m *AnalyzeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyzeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepoType

	if l := utf8.RuneCountInString(m.GetPath()); l < 8 || l > 256 {
		err := AnalyzeReqValidationError{
			field:  "Path",
			reason: "value length must be between 8 and 256 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Target

	// no validation rules for Token

	// no validation rules for Language

	if len(errors) > 0 {
		return AnalyzeReqMultiError(errors)
	}

	return nil
}

// AnalyzeReqMultiError is an error wrapping multiple validation errors
// returned by AnalyzeReq.ValidateAll() if the designated constraints aren't met.
type AnalyzeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyzeReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyzeReqMultiError) AllErrors() []error { return m }

// AnalyzeReqValidationError is the validation error returned by
// AnalyzeReq.Validate if the designated constraints aren't met.
type AnalyzeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyzeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyzeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyzeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyzeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyzeReqValidationError) ErrorName() string { return "AnalyzeReqValidationError" }

// Error satisfies the builtin error interface
func (e AnalyzeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyzeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyzeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyzeReqValidationError{}

// Validate checks the field values on AnalyzeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AnalyzeResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnalyzeResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnalyzeRespMultiError, or
// nil if none found.
func (m *AnalyzeResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AnalyzeResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	if len(errors) > 0 {
		return AnalyzeRespMultiError(errors)
	}

	return nil
}

// AnalyzeRespMultiError is an error wrapping multiple validation errors
// returned by AnalyzeResp.ValidateAll() if the designated constraints aren't met.
type AnalyzeRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnalyzeRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnalyzeRespMultiError) AllErrors() []error { return m }

// AnalyzeRespValidationError is the validation error returned by
// AnalyzeResp.Validate if the designated constraints aren't met.
type AnalyzeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnalyzeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnalyzeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnalyzeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnalyzeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnalyzeRespValidationError) ErrorName() string { return "AnalyzeRespValidationError" }

// Error satisfies the builtin error interface
func (e AnalyzeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnalyzeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnalyzeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnalyzeRespValidationError{}

// Validate checks the field values on CallChainReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallChainReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallChainReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallChainReqMultiError, or
// nil if none found.
func (m *CallChainReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CallChainReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartFunctionName

	if len(errors) > 0 {
		return CallChainReqMultiError(errors)
	}

	return nil
}

// CallChainReqMultiError is an error wrapping multiple validation errors
// returned by CallChainReq.ValidateAll() if the designated constraints aren't met.
type CallChainReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallChainReqMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallChainReqMultiError) AllErrors() []error { return m }

// CallChainReqValidationError is the validation error returned by
// CallChainReq.Validate if the designated constraints aren't met.
type CallChainReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallChainReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallChainReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallChainReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallChainReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallChainReqValidationError) ErrorName() string { return "CallChainReqValidationError" }

// Error satisfies the builtin error interface
func (e CallChainReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallChainReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallChainReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallChainReqValidationError{}

// Validate checks the field values on CallChainResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CallChainResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallChainResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CallChainRespMultiError, or
// nil if none found.
func (m *CallChainResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CallChainResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Msg

	for idx, item := range m.GetCallRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CallChainRespValidationError{
						field:  fmt.Sprintf("CallRelations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CallChainRespValidationError{
						field:  fmt.Sprintf("CallRelations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CallChainRespValidationError{
					field:  fmt.Sprintf("CallRelations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CallChainRespMultiError(errors)
	}

	return nil
}

// CallChainRespMultiError is an error wrapping multiple validation errors
// returned by CallChainResp.ValidateAll() if the designated constraints
// aren't met.
type CallChainRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallChainRespMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallChainRespMultiError) AllErrors() []error { return m }

// CallChainRespValidationError is the validation error returned by
// CallChainResp.Validate if the designated constraints aren't met.
type CallChainRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallChainRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallChainRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallChainRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallChainRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallChainRespValidationError) ErrorName() string { return "CallChainRespValidationError" }

// Error satisfies the builtin error interface
func (e CallChainRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallChainResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallChainRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallChainRespValidationError{}

// Validate checks the field values on CallRelationship with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CallRelationship) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallRelationship with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallRelationshipMultiError, or nil if none found.
func (m *CallRelationship) ValidateAll() error {
	return m.validate(true)
}

func (m *CallRelationship) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CallerId

	// no validation rules for CallerName

	// no validation rules for CalleeId

	// no validation rules for CalleeName

	if len(errors) > 0 {
		return CallRelationshipMultiError(errors)
	}

	return nil
}

// CallRelationshipMultiError is an error wrapping multiple validation errors
// returned by CallRelationship.ValidateAll() if the designated constraints
// aren't met.
type CallRelationshipMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallRelationshipMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallRelationshipMultiError) AllErrors() []error { return m }

// CallRelationshipValidationError is the validation error returned by
// CallRelationship.Validate if the designated constraints aren't met.
type CallRelationshipValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallRelationshipValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallRelationshipValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallRelationshipValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallRelationshipValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallRelationshipValidationError) ErrorName() string { return "CallRelationshipValidationError" }

// Error satisfies the builtin error interface
func (e CallRelationshipValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallRelationship.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallRelationshipValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallRelationshipValidationError{}
