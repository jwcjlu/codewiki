// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: codewiki/v1/codewiki.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RepoService_CreateRepo_FullMethodName  = "/codewiki.v1.RepoService/CreateRepo"
	RepoService_ListRepos_FullMethodName   = "/codewiki.v1.RepoService/ListRepos"
	RepoService_GetRepo_FullMethodName     = "/codewiki.v1.RepoService/GetRepo"
	RepoService_DeleteRepo_FullMethodName  = "/codewiki.v1.RepoService/DeleteRepo"
	RepoService_GetRepoTree_FullMethodName = "/codewiki.v1.RepoService/GetRepoTree"
)

// RepoServiceClient is the client API for RepoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepoServiceClient interface {
	// Repo management
	CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*CreateRepoResp, error)
	ListRepos(ctx context.Context, in *ListRepoReq, opts ...grpc.CallOption) (*ListRepoResp, error)
	GetRepo(ctx context.Context, in *GetRepoReq, opts ...grpc.CallOption) (*GetRepoResp, error)
	DeleteRepo(ctx context.Context, in *DeleteRepoReq, opts ...grpc.CallOption) (*DeleteRepoResp, error)
	// Repo tree display
	GetRepoTree(ctx context.Context, in *GetRepoTreeReq, opts ...grpc.CallOption) (*GetRepoTreeResp, error)
}

type repoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepoServiceClient(cc grpc.ClientConnInterface) RepoServiceClient {
	return &repoServiceClient{cc}
}

func (c *repoServiceClient) CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*CreateRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRepoResp)
	err := c.cc.Invoke(ctx, RepoService_CreateRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) ListRepos(ctx context.Context, in *ListRepoReq, opts ...grpc.CallOption) (*ListRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRepoResp)
	err := c.cc.Invoke(ctx, RepoService_ListRepos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetRepo(ctx context.Context, in *GetRepoReq, opts ...grpc.CallOption) (*GetRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepoResp)
	err := c.cc.Invoke(ctx, RepoService_GetRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) DeleteRepo(ctx context.Context, in *DeleteRepoReq, opts ...grpc.CallOption) (*DeleteRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRepoResp)
	err := c.cc.Invoke(ctx, RepoService_DeleteRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *repoServiceClient) GetRepoTree(ctx context.Context, in *GetRepoTreeReq, opts ...grpc.CallOption) (*GetRepoTreeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepoTreeResp)
	err := c.cc.Invoke(ctx, RepoService_GetRepoTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepoServiceServer is the server API for RepoService service.
// All implementations must embed UnimplementedRepoServiceServer
// for forward compatibility.
type RepoServiceServer interface {
	// Repo management
	CreateRepo(context.Context, *CreateRepoReq) (*CreateRepoResp, error)
	ListRepos(context.Context, *ListRepoReq) (*ListRepoResp, error)
	GetRepo(context.Context, *GetRepoReq) (*GetRepoResp, error)
	DeleteRepo(context.Context, *DeleteRepoReq) (*DeleteRepoResp, error)
	// Repo tree display
	GetRepoTree(context.Context, *GetRepoTreeReq) (*GetRepoTreeResp, error)
	mustEmbedUnimplementedRepoServiceServer()
}

// UnimplementedRepoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRepoServiceServer struct{}

func (UnimplementedRepoServiceServer) CreateRepo(context.Context, *CreateRepoReq) (*CreateRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedRepoServiceServer) ListRepos(context.Context, *ListRepoReq) (*ListRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepos not implemented")
}
func (UnimplementedRepoServiceServer) GetRepo(context.Context, *GetRepoReq) (*GetRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepo not implemented")
}
func (UnimplementedRepoServiceServer) DeleteRepo(context.Context, *DeleteRepoReq) (*DeleteRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (UnimplementedRepoServiceServer) GetRepoTree(context.Context, *GetRepoTreeReq) (*GetRepoTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoTree not implemented")
}
func (UnimplementedRepoServiceServer) mustEmbedUnimplementedRepoServiceServer() {}
func (UnimplementedRepoServiceServer) testEmbeddedByValue()                     {}

// UnsafeRepoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepoServiceServer will
// result in compilation errors.
type UnsafeRepoServiceServer interface {
	mustEmbedUnimplementedRepoServiceServer()
}

func RegisterRepoServiceServer(s grpc.ServiceRegistrar, srv RepoServiceServer) {
	// If the following call pancis, it indicates UnimplementedRepoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RepoService_ServiceDesc, srv)
}

func _RepoService_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_CreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).CreateRepo(ctx, req.(*CreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_ListRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).ListRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_ListRepos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).ListRepos(ctx, req.(*ListRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_GetRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetRepo(ctx, req.(*GetRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_DeleteRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).DeleteRepo(ctx, req.(*DeleteRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RepoService_GetRepoTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepoServiceServer).GetRepoTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepoService_GetRepoTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepoServiceServer).GetRepoTree(ctx, req.(*GetRepoTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RepoService_ServiceDesc is the grpc.ServiceDesc for RepoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codewiki.v1.RepoService",
	HandlerType: (*RepoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRepo",
			Handler:    _RepoService_CreateRepo_Handler,
		},
		{
			MethodName: "ListRepos",
			Handler:    _RepoService_ListRepos_Handler,
		},
		{
			MethodName: "GetRepo",
			Handler:    _RepoService_GetRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _RepoService_DeleteRepo_Handler,
		},
		{
			MethodName: "GetRepoTree",
			Handler:    _RepoService_GetRepoTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codewiki/v1/codewiki.proto",
}

const (
	CodeAnalyzerService_CallChain_FullMethodName       = "/codewiki.v1.CodeAnalyzerService/CallChain"
	CodeAnalyzerService_AnalyzeRepo_FullMethodName     = "/codewiki.v1.CodeAnalyzerService/AnalyzeRepo"
	CodeAnalyzerService_ViewFileContent_FullMethodName = "/codewiki.v1.CodeAnalyzerService/ViewFileContent"
	CodeAnalyzerService_GetImplement_FullMethodName    = "/codewiki.v1.CodeAnalyzerService/GetImplement"
)

// CodeAnalyzerServiceClient is the client API for CodeAnalyzerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeAnalyzerServiceClient interface {
	CallChain(ctx context.Context, in *CallChainReq, opts ...grpc.CallOption) (*CallChainResp, error)
	// Analyze by repository id
	AnalyzeRepo(ctx context.Context, in *AnalyzeRepoReq, opts ...grpc.CallOption) (*AnalyzeResp, error)
	// File  view  content
	ViewFileContent(ctx context.Context, in *ViewFileReq, opts ...grpc.CallOption) (*ViewFileResp, error)
	// interface  implement
	GetImplement(ctx context.Context, in *GetImplementReq, opts ...grpc.CallOption) (*GetImplementResp, error)
}

type codeAnalyzerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeAnalyzerServiceClient(cc grpc.ClientConnInterface) CodeAnalyzerServiceClient {
	return &codeAnalyzerServiceClient{cc}
}

func (c *codeAnalyzerServiceClient) CallChain(ctx context.Context, in *CallChainReq, opts ...grpc.CallOption) (*CallChainResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallChainResp)
	err := c.cc.Invoke(ctx, CodeAnalyzerService_CallChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeAnalyzerServiceClient) AnalyzeRepo(ctx context.Context, in *AnalyzeRepoReq, opts ...grpc.CallOption) (*AnalyzeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeResp)
	err := c.cc.Invoke(ctx, CodeAnalyzerService_AnalyzeRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeAnalyzerServiceClient) ViewFileContent(ctx context.Context, in *ViewFileReq, opts ...grpc.CallOption) (*ViewFileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewFileResp)
	err := c.cc.Invoke(ctx, CodeAnalyzerService_ViewFileContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeAnalyzerServiceClient) GetImplement(ctx context.Context, in *GetImplementReq, opts ...grpc.CallOption) (*GetImplementResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImplementResp)
	err := c.cc.Invoke(ctx, CodeAnalyzerService_GetImplement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeAnalyzerServiceServer is the server API for CodeAnalyzerService service.
// All implementations must embed UnimplementedCodeAnalyzerServiceServer
// for forward compatibility.
type CodeAnalyzerServiceServer interface {
	CallChain(context.Context, *CallChainReq) (*CallChainResp, error)
	// Analyze by repository id
	AnalyzeRepo(context.Context, *AnalyzeRepoReq) (*AnalyzeResp, error)
	// File  view  content
	ViewFileContent(context.Context, *ViewFileReq) (*ViewFileResp, error)
	// interface  implement
	GetImplement(context.Context, *GetImplementReq) (*GetImplementResp, error)
	mustEmbedUnimplementedCodeAnalyzerServiceServer()
}

// UnimplementedCodeAnalyzerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodeAnalyzerServiceServer struct{}

func (UnimplementedCodeAnalyzerServiceServer) CallChain(context.Context, *CallChainReq) (*CallChainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallChain not implemented")
}
func (UnimplementedCodeAnalyzerServiceServer) AnalyzeRepo(context.Context, *AnalyzeRepoReq) (*AnalyzeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeRepo not implemented")
}
func (UnimplementedCodeAnalyzerServiceServer) ViewFileContent(context.Context, *ViewFileReq) (*ViewFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewFileContent not implemented")
}
func (UnimplementedCodeAnalyzerServiceServer) GetImplement(context.Context, *GetImplementReq) (*GetImplementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImplement not implemented")
}
func (UnimplementedCodeAnalyzerServiceServer) mustEmbedUnimplementedCodeAnalyzerServiceServer() {}
func (UnimplementedCodeAnalyzerServiceServer) testEmbeddedByValue()                             {}

// UnsafeCodeAnalyzerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeAnalyzerServiceServer will
// result in compilation errors.
type UnsafeCodeAnalyzerServiceServer interface {
	mustEmbedUnimplementedCodeAnalyzerServiceServer()
}

func RegisterCodeAnalyzerServiceServer(s grpc.ServiceRegistrar, srv CodeAnalyzerServiceServer) {
	// If the following call pancis, it indicates UnimplementedCodeAnalyzerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CodeAnalyzerService_ServiceDesc, srv)
}

func _CodeAnalyzerService_CallChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallChainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeAnalyzerServiceServer).CallChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeAnalyzerService_CallChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeAnalyzerServiceServer).CallChain(ctx, req.(*CallChainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeAnalyzerService_AnalyzeRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeAnalyzerServiceServer).AnalyzeRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeAnalyzerService_AnalyzeRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeAnalyzerServiceServer).AnalyzeRepo(ctx, req.(*AnalyzeRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeAnalyzerService_ViewFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeAnalyzerServiceServer).ViewFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeAnalyzerService_ViewFileContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeAnalyzerServiceServer).ViewFileContent(ctx, req.(*ViewFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeAnalyzerService_GetImplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImplementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeAnalyzerServiceServer).GetImplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeAnalyzerService_GetImplement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeAnalyzerServiceServer).GetImplement(ctx, req.(*GetImplementReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeAnalyzerService_ServiceDesc is the grpc.ServiceDesc for CodeAnalyzerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeAnalyzerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codewiki.v1.CodeAnalyzerService",
	HandlerType: (*CodeAnalyzerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallChain",
			Handler:    _CodeAnalyzerService_CallChain_Handler,
		},
		{
			MethodName: "AnalyzeRepo",
			Handler:    _CodeAnalyzerService_AnalyzeRepo_Handler,
		},
		{
			MethodName: "ViewFileContent",
			Handler:    _CodeAnalyzerService_ViewFileContent_Handler,
		},
		{
			MethodName: "GetImplement",
			Handler:    _CodeAnalyzerService_GetImplement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codewiki/v1/codewiki.proto",
}
