// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: codewiki/v1/codewiki.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CodeWikiService_CallChain_FullMethodName       = "/codewiki.v1.CodeWikiService/CallChain"
	CodeWikiService_CreateRepo_FullMethodName      = "/codewiki.v1.CodeWikiService/CreateRepo"
	CodeWikiService_ListRepos_FullMethodName       = "/codewiki.v1.CodeWikiService/ListRepos"
	CodeWikiService_GetRepo_FullMethodName         = "/codewiki.v1.CodeWikiService/GetRepo"
	CodeWikiService_DeleteRepo_FullMethodName      = "/codewiki.v1.CodeWikiService/DeleteRepo"
	CodeWikiService_AnalyzeRepo_FullMethodName     = "/codewiki.v1.CodeWikiService/AnalyzeRepo"
	CodeWikiService_GetRepoTree_FullMethodName     = "/codewiki.v1.CodeWikiService/GetRepoTree"
	CodeWikiService_ViewFileContent_FullMethodName = "/codewiki.v1.CodeWikiService/ViewFileContent"
	CodeWikiService_GetImplement_FullMethodName    = "/codewiki.v1.CodeWikiService/GetImplement"
	CodeWikiService_Answer_FullMethodName          = "/codewiki.v1.CodeWikiService/Answer"
)

// CodeWikiServiceClient is the client API for CodeWikiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeWikiServiceClient interface {
	CallChain(ctx context.Context, in *CallChainReq, opts ...grpc.CallOption) (*CallChainResp, error)
	// Repo management
	CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*CreateRepoResp, error)
	ListRepos(ctx context.Context, in *ListReposReq, opts ...grpc.CallOption) (*ListReposResp, error)
	GetRepo(ctx context.Context, in *GetRepoReq, opts ...grpc.CallOption) (*GetRepoResp, error)
	DeleteRepo(ctx context.Context, in *DeleteRepoReq, opts ...grpc.CallOption) (*DeleteRepoResp, error)
	// Analyze by repository id
	AnalyzeRepo(ctx context.Context, in *AnalyzeRepoReq, opts ...grpc.CallOption) (*AnalyzeResp, error)
	// Repo tree display
	GetRepoTree(ctx context.Context, in *GetRepoTreeReq, opts ...grpc.CallOption) (*GetRepoTreeResp, error)
	// File  view  content
	ViewFileContent(ctx context.Context, in *ViewFileReq, opts ...grpc.CallOption) (*ViewFileResp, error)
	// interface  implement
	GetImplement(ctx context.Context, in *GetImplementReq, opts ...grpc.CallOption) (*GetImplementResp, error)
	Answer(ctx context.Context, in *AnswerReq, opts ...grpc.CallOption) (*AnswerResp, error)
}

type codeWikiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeWikiServiceClient(cc grpc.ClientConnInterface) CodeWikiServiceClient {
	return &codeWikiServiceClient{cc}
}

func (c *codeWikiServiceClient) CallChain(ctx context.Context, in *CallChainReq, opts ...grpc.CallOption) (*CallChainResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallChainResp)
	err := c.cc.Invoke(ctx, CodeWikiService_CallChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeWikiServiceClient) CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*CreateRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRepoResp)
	err := c.cc.Invoke(ctx, CodeWikiService_CreateRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeWikiServiceClient) ListRepos(ctx context.Context, in *ListReposReq, opts ...grpc.CallOption) (*ListReposResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReposResp)
	err := c.cc.Invoke(ctx, CodeWikiService_ListRepos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeWikiServiceClient) GetRepo(ctx context.Context, in *GetRepoReq, opts ...grpc.CallOption) (*GetRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepoResp)
	err := c.cc.Invoke(ctx, CodeWikiService_GetRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeWikiServiceClient) DeleteRepo(ctx context.Context, in *DeleteRepoReq, opts ...grpc.CallOption) (*DeleteRepoResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRepoResp)
	err := c.cc.Invoke(ctx, CodeWikiService_DeleteRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeWikiServiceClient) AnalyzeRepo(ctx context.Context, in *AnalyzeRepoReq, opts ...grpc.CallOption) (*AnalyzeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeResp)
	err := c.cc.Invoke(ctx, CodeWikiService_AnalyzeRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeWikiServiceClient) GetRepoTree(ctx context.Context, in *GetRepoTreeReq, opts ...grpc.CallOption) (*GetRepoTreeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRepoTreeResp)
	err := c.cc.Invoke(ctx, CodeWikiService_GetRepoTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeWikiServiceClient) ViewFileContent(ctx context.Context, in *ViewFileReq, opts ...grpc.CallOption) (*ViewFileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewFileResp)
	err := c.cc.Invoke(ctx, CodeWikiService_ViewFileContent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeWikiServiceClient) GetImplement(ctx context.Context, in *GetImplementReq, opts ...grpc.CallOption) (*GetImplementResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetImplementResp)
	err := c.cc.Invoke(ctx, CodeWikiService_GetImplement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeWikiServiceClient) Answer(ctx context.Context, in *AnswerReq, opts ...grpc.CallOption) (*AnswerResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnswerResp)
	err := c.cc.Invoke(ctx, CodeWikiService_Answer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeWikiServiceServer is the server API for CodeWikiService service.
// All implementations must embed UnimplementedCodeWikiServiceServer
// for forward compatibility.
type CodeWikiServiceServer interface {
	CallChain(context.Context, *CallChainReq) (*CallChainResp, error)
	// Repo management
	CreateRepo(context.Context, *CreateRepoReq) (*CreateRepoResp, error)
	ListRepos(context.Context, *ListReposReq) (*ListReposResp, error)
	GetRepo(context.Context, *GetRepoReq) (*GetRepoResp, error)
	DeleteRepo(context.Context, *DeleteRepoReq) (*DeleteRepoResp, error)
	// Analyze by repository id
	AnalyzeRepo(context.Context, *AnalyzeRepoReq) (*AnalyzeResp, error)
	// Repo tree display
	GetRepoTree(context.Context, *GetRepoTreeReq) (*GetRepoTreeResp, error)
	// File  view  content
	ViewFileContent(context.Context, *ViewFileReq) (*ViewFileResp, error)
	// interface  implement
	GetImplement(context.Context, *GetImplementReq) (*GetImplementResp, error)
	Answer(context.Context, *AnswerReq) (*AnswerResp, error)
	mustEmbedUnimplementedCodeWikiServiceServer()
}

// UnimplementedCodeWikiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodeWikiServiceServer struct{}

func (UnimplementedCodeWikiServiceServer) CallChain(context.Context, *CallChainReq) (*CallChainResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallChain not implemented")
}
func (UnimplementedCodeWikiServiceServer) CreateRepo(context.Context, *CreateRepoReq) (*CreateRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedCodeWikiServiceServer) ListRepos(context.Context, *ListReposReq) (*ListReposResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepos not implemented")
}
func (UnimplementedCodeWikiServiceServer) GetRepo(context.Context, *GetRepoReq) (*GetRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepo not implemented")
}
func (UnimplementedCodeWikiServiceServer) DeleteRepo(context.Context, *DeleteRepoReq) (*DeleteRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (UnimplementedCodeWikiServiceServer) AnalyzeRepo(context.Context, *AnalyzeRepoReq) (*AnalyzeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeRepo not implemented")
}
func (UnimplementedCodeWikiServiceServer) GetRepoTree(context.Context, *GetRepoTreeReq) (*GetRepoTreeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepoTree not implemented")
}
func (UnimplementedCodeWikiServiceServer) ViewFileContent(context.Context, *ViewFileReq) (*ViewFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewFileContent not implemented")
}
func (UnimplementedCodeWikiServiceServer) GetImplement(context.Context, *GetImplementReq) (*GetImplementResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImplement not implemented")
}
func (UnimplementedCodeWikiServiceServer) Answer(context.Context, *AnswerReq) (*AnswerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Answer not implemented")
}
func (UnimplementedCodeWikiServiceServer) mustEmbedUnimplementedCodeWikiServiceServer() {}
func (UnimplementedCodeWikiServiceServer) testEmbeddedByValue()                         {}

// UnsafeCodeWikiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeWikiServiceServer will
// result in compilation errors.
type UnsafeCodeWikiServiceServer interface {
	mustEmbedUnimplementedCodeWikiServiceServer()
}

func RegisterCodeWikiServiceServer(s grpc.ServiceRegistrar, srv CodeWikiServiceServer) {
	// If the following call pancis, it indicates UnimplementedCodeWikiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CodeWikiService_ServiceDesc, srv)
}

func _CodeWikiService_CallChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallChainReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).CallChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_CallChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).CallChain(ctx, req.(*CallChainReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeWikiService_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_CreateRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).CreateRepo(ctx, req.(*CreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeWikiService_ListRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReposReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).ListRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_ListRepos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).ListRepos(ctx, req.(*ListReposReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeWikiService_GetRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).GetRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_GetRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).GetRepo(ctx, req.(*GetRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeWikiService_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_DeleteRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).DeleteRepo(ctx, req.(*DeleteRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeWikiService_AnalyzeRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).AnalyzeRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_AnalyzeRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).AnalyzeRepo(ctx, req.(*AnalyzeRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeWikiService_GetRepoTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).GetRepoTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_GetRepoTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).GetRepoTree(ctx, req.(*GetRepoTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeWikiService_ViewFileContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).ViewFileContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_ViewFileContent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).ViewFileContent(ctx, req.(*ViewFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeWikiService_GetImplement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImplementReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).GetImplement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_GetImplement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).GetImplement(ctx, req.(*GetImplementReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeWikiService_Answer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeWikiServiceServer).Answer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeWikiService_Answer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeWikiServiceServer).Answer(ctx, req.(*AnswerReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeWikiService_ServiceDesc is the grpc.ServiceDesc for CodeWikiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeWikiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "codewiki.v1.CodeWikiService",
	HandlerType: (*CodeWikiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallChain",
			Handler:    _CodeWikiService_CallChain_Handler,
		},
		{
			MethodName: "CreateRepo",
			Handler:    _CodeWikiService_CreateRepo_Handler,
		},
		{
			MethodName: "ListRepos",
			Handler:    _CodeWikiService_ListRepos_Handler,
		},
		{
			MethodName: "GetRepo",
			Handler:    _CodeWikiService_GetRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _CodeWikiService_DeleteRepo_Handler,
		},
		{
			MethodName: "AnalyzeRepo",
			Handler:    _CodeWikiService_AnalyzeRepo_Handler,
		},
		{
			MethodName: "GetRepoTree",
			Handler:    _CodeWikiService_GetRepoTree_Handler,
		},
		{
			MethodName: "ViewFileContent",
			Handler:    _CodeWikiService_ViewFileContent_Handler,
		},
		{
			MethodName: "GetImplement",
			Handler:    _CodeWikiService_GetImplement_Handler,
		},
		{
			MethodName: "Answer",
			Handler:    _CodeWikiService_Answer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codewiki/v1/codewiki.proto",
}
