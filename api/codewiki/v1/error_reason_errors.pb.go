// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func Is(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason__.String() && e.Code == 500
}

func Error(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason__.String(), fmt.Sprintf(format, args...))
}

func IsParamValidate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParamValidate.String() && e.Code == 400
}

func ErrorParamValidate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_ParamValidate.String(), fmt.Sprintf(format, args...))
}

func IsDataInsert(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DataInsert.String() && e.Code == 500
}

func ErrorDataInsert(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DataInsert.String(), fmt.Sprintf(format, args...))
}

func IsDataDelete(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DataDelete.String() && e.Code == 500
}

func ErrorDataDelete(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DataDelete.String(), fmt.Sprintf(format, args...))
}

func IsDataUpdate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DataUpdate.String() && e.Code == 500
}

func ErrorDataUpdate(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DataUpdate.String(), fmt.Sprintf(format, args...))
}

func IsDataQuery(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DataQuery.String() && e.Code == 500
}

func ErrorDataQuery(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DataQuery.String(), fmt.Sprintf(format, args...))
}

func IsDataRecordNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DataRecordNotFound.String() && e.Code == 500
}

func ErrorDataRecordNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DataRecordNotFound.String(), fmt.Sprintf(format, args...))
}

func IsRpc(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Rpc.String() && e.Code == 500
}

func ErrorRpc(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_Rpc.String(), fmt.Sprintf(format, args...))
}

func IsBizDuplicateOp(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_BizDuplicateOp.String() && e.Code == 500
}

func ErrorBizDuplicateOp(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_BizDuplicateOp.String(), fmt.Sprintf(format, args...))
}

func IsNotFoundHostNetwork(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NotFoundHostNetwork.String() && e.Code == 500
}

func ErrorNotFoundHostNetwork(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_NotFoundHostNetwork.String(), fmt.Sprintf(format, args...))
}

func IsAcl(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_Acl.String() && e.Code == 500
}

func ErrorAcl(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_Acl.String(), fmt.Sprintf(format, args...))
}

func IsParseCodeError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ParseCodeError.String() && e.Code == 500
}

func ErrorParseCodeError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ParseCodeError.String(), fmt.Sprintf(format, args...))
}

func IsAnalyzeRelations(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AnalyzeRelations.String() && e.Code == 500
}

func ErrorAnalyzeRelations(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_AnalyzeRelations.String(), fmt.Sprintf(format, args...))
}

func IsAnalyzeDependencies(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AnalyzeDependencies.String() && e.Code == 500
}

func ErrorAnalyzeDependencies(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_AnalyzeDependencies.String(), fmt.Sprintf(format, args...))
}
