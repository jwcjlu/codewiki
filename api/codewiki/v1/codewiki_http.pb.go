// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.30.2
// source: codewiki/v1/codewiki.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationCodeWikiServiceAnalyze = "/codewiki.v1.CodeWikiService/Analyze"
const OperationCodeWikiServiceCallChain = "/codewiki.v1.CodeWikiService/CallChain"

type CodeWikiServiceHTTPServer interface {
	Analyze(context.Context, *AnalyzeReq) (*AnalyzeResp, error)
	CallChain(context.Context, *CallChainReq) (*CallChainResp, error)
}

func RegisterCodeWikiServiceHTTPServer(s *http.Server, srv CodeWikiServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/api/project/analyze", _CodeWikiService_Analyze0_HTTP_Handler(srv))
	r.GET("/v1/api/functions/{startFunctionName}/calls", _CodeWikiService_CallChain0_HTTP_Handler(srv))
}

func _CodeWikiService_Analyze0_HTTP_Handler(srv CodeWikiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AnalyzeReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCodeWikiServiceAnalyze)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Analyze(ctx, req.(*AnalyzeReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AnalyzeResp)
		return ctx.Result(200, reply)
	}
}

func _CodeWikiService_CallChain0_HTTP_Handler(srv CodeWikiServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CallChainReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationCodeWikiServiceCallChain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CallChain(ctx, req.(*CallChainReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CallChainResp)
		return ctx.Result(200, reply)
	}
}

type CodeWikiServiceHTTPClient interface {
	Analyze(ctx context.Context, req *AnalyzeReq, opts ...http.CallOption) (rsp *AnalyzeResp, err error)
	CallChain(ctx context.Context, req *CallChainReq, opts ...http.CallOption) (rsp *CallChainResp, err error)
}

type CodeWikiServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewCodeWikiServiceHTTPClient(client *http.Client) CodeWikiServiceHTTPClient {
	return &CodeWikiServiceHTTPClientImpl{client}
}

func (c *CodeWikiServiceHTTPClientImpl) Analyze(ctx context.Context, in *AnalyzeReq, opts ...http.CallOption) (*AnalyzeResp, error) {
	var out AnalyzeResp
	pattern := "/v1/api/project/analyze"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationCodeWikiServiceAnalyze))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *CodeWikiServiceHTTPClientImpl) CallChain(ctx context.Context, in *CallChainReq, opts ...http.CallOption) (*CallChainResp, error) {
	var out CallChainResp
	pattern := "/v1/api/functions/{startFunctionName}/calls"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationCodeWikiServiceCallChain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
